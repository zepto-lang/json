(load "json/tokenize.zp")
(load "json/lex.zp")
(load "json/build.zp")
(load "json/dump.zp")

(define (json:parse elements)
  "parse json to zepto data structure; 
    e.g. input:  {'foo': 10}
         output: #{foo: 10, }" 
  (let ((tokens (json:tokenize elements)))
    (if (json:lex tokens)
      (json:build-json tokens)
      :error)))

(define (json:parse-all elements)
  "parse json to zepto data structure; accumulate multiple structures into list;
    e.g. input:  {'foo': 10}{}
         output: (#{foo: 10, } #{})"
  (let ((tokens (json:tokenize-all elements)))
    (if (json:lex-all tokens)
      (json:build-json-all tokens)
      :error)))

(define (json:dump elements)
  "converts zepto to json string"
  (json:stringify elements))

; JSON pointer utilities
(define (json:pointer->indices pointer)
  (define (decode-pointer elem)
    (|> elem
        ($ (string:substitute % "~0" "~"))
        ($ (string:substitute % "~1" "/"))))
  (map decode-pointer (string:split pointer "/")))

(define (json:pointer-lookup dict pointer . dflt)
  (if (null? pointer)
    dict
    (let ((indices (json:pointer->indices pointer)))
      (apply get-from dict indices (if (null? dflt) (nil) dflt)))))
