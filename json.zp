(define (json:tokenize json) (json:_tokenize (string->list json)))

(define (json:_tokenize json-list) 
  "return json as zepto object; 
    e.g. input:  \"{'lol': 1}\"
         output: {'lol' 1}"
    (let* ((token (car json-list)))
      (cond ((char=? token #\,) 
              (list (cdr json-list) ["<elem-delim>" ","]))
            ((char=? token #\:)
              (list (cdr json-list) ["<prop-delim>" ":"]))
            ((or (char=? token #\space) (char=? token #\tab) (char=? token #\newline)) (json:_tokenize (cdr json-list)))
            ((char=? token #\}) (list json-list '()))
            ((char=? token #\]) (list json-list '()))
            ((char=? token #\{) 
              (begin
                (define tuple (json:parse-json-object (cdr json-list)))
                (list (car tuple) (list "json-object" (cadr tuple)))))
            ((char=? token #\[) 
              (begin
                (define tuple (json:parse-json-array (cdr json-list)))
                (list (car tuple) (list "json-array" (cadr tuple)))))
            ((or (char=? token #\") (char=? token #\'))
              (begin
                (define tuple (json:parse-json-string (cdr json-list) token))
                (list (car tuple) (list "json-string" (cadr tuple)))))
            ((char-num? token) 
              (begin
                (define tuple (json:parse-json-num json-list))
                (list (car tuple) (list "json-num" (cadr tuple)))))
            (else (error (list "Parse error at: " token))))))

(define (json:parse-json-object l)
  (define (parse-object x s)
    (if (char=? (car x) #\})
      (list (cdr x) s)
      (begin
        (define tuple (json:_tokenize x))
        (parse-object (car tuple) (+= s (cadr tuple))))))
  (parse-object l []))

(define (json:parse-json-array l)
  (define (parse-array x s)
    (if (char=? (car x) #\])
      (list (cdr x) s)
      (begin
        (define tuple (json:_tokenize x))
        (parse-array (car tuple) (+= s (cadr tuple))))))
  (parse-array l []))

(define (json:parse-json-string l token)
  (define (parse-string x s)
    (if (char=? (car x) token)
      (list (cdr x) s)
      (parse-string (cdr x) (++ s (car x)))))
  (parse-string l ""))

(define (json:parse-json-num l)
  (define (parse-num x s)
    (if (char-num? (car x))
      (parse-num (cdr x) (++ s (car x)))
      (list x s)))
  (parse-num l ""))
